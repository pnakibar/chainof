{"name":"Chain of Responsibility","tagline":"Padrão Chain of Responsibility em Python","body":"### Objetivo\r\n* Evitar juntar quem envia um pedido e quem recebe, dando a mais de um objeto a chance de manusear o pedido. _Linkar_ os objetos receptores e passar pela corrente o pedido até que um objeto o manuseie.\r\n* Pedidos _Launch and Leave_ em uma única pipeline que contem alguns possíveis manuseadores\r\n* Uma lista ligada orientada a objeto com travessia recursiva\r\n\r\n\r\n### Problema\r\nSe tem um número grande de _handlers_ e um pacote de pedidos para ser trabalhado. É necessário processar os pedidos sem ter que fazer ligações entre os _handlers_.\r\n![](http://sourcemaking.com/files/v2/content/patterns/Chain_of_responsibility1-2x.png)\r\n\r\n\r\n### Solução\r\nEncapsular o processo dentro de uma abstração de _pipeline_ e ter que os clientes _launch and leave_, os seus pedidos.\r\n![](http://sourcemaking.com/files/v2/content/patterns/Chain_of_responsibility_1-2x.png)\r\n\r\n### Estrutura\r\nAs classes sabem como satisfazer os pedidos dos clientes. Se um _handler_ não pode ser acessado ou não pode manusear, ele então passa o pedido pra frente, e o ciclo continua até o fim.\r\n![](http://sourcemaking.com/files/v2/content/patterns/Chain_of_responsibility__-2x.png)\r\n\r\n### Exemplo\r\nO padrão evita o acoplamento de quem realiza o pedido com o receptor dele, dando a mais de um objeto a oportunidade de manusear o pedido. Caixas eletrônicos fazem uso desse padrão no mecanismo de saque de dinheiro.\r\n![](http://sourcemaking.com/files/sm/images/patterns/Chain_of_responsibility_example.png)\r\n\r\n### Authors and Contributors\r\n* Autores @pnakibar e @rikes\r\n* Adaptado de http://sourcemaking.com/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}